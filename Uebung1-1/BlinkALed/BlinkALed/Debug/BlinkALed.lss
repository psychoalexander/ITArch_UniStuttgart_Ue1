
BlinkALed.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000dc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007aa  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068a  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000297  00000000  00000000  00000ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  0000128c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000385  00000000  00000000  000012b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001635  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000170d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:


int main(void)
{
    /* LED A3 als Ausgang */
    DDRB = 0x02;
  80:	82 e0       	ldi	r24, 0x02	; 2
  82:	84 b9       	out	0x04, r24	; 4
	/* Sensor Bandanfang und Bandende als Eingang definieren */
	DDRD = 0x00;
  84:	1a b8       	out	0x0a, r1	; 10
	PORTD = 0x0C;
  86:	8c e0       	ldi	r24, 0x0C	; 12
  88:	8b b9       	out	0x0b, r24	; 11
			PORTB = 0x00;
			_delay_ms(100);
		}
		else
		{
			PORTB = 0x02; // LED Mode 2
  8a:	82 e0       	ldi	r24, 0x02	; 2
	DDRD = 0x00;
	PORTD = 0x0C;
	
	while(1)
	{
		if ((PIND & 0x04) == 0)
  8c:	4a 99       	sbic	0x09, 2	; 9
  8e:	0f c0       	rjmp	.+30     	; 0xae <main+0x2e>
		{
			PORTB = 0x02; // LED einschalten Mode 1
  90:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	e7 ea       	ldi	r30, 0xA7	; 167
  94:	f1 e6       	ldi	r31, 0x61	; 97
  96:	31 97       	sbiw	r30, 0x01	; 1
  98:	f1 f7       	brne	.-4      	; 0x96 <main+0x16>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <main+0x1c>
  9c:	00 00       	nop
			_delay_ms(100);
			PORTB = 0x00;
  9e:	15 b8       	out	0x05, r1	; 5
  a0:	e7 ea       	ldi	r30, 0xA7	; 167
  a2:	f1 e6       	ldi	r31, 0x61	; 97
  a4:	31 97       	sbiw	r30, 0x01	; 1
  a6:	f1 f7       	brne	.-4      	; 0xa4 <main+0x24>
  a8:	00 c0       	rjmp	.+0      	; 0xaa <main+0x2a>
  aa:	00 00       	nop
  ac:	ef cf       	rjmp	.-34     	; 0x8c <main+0xc>
			_delay_ms(100);
		}
		else
		{
			PORTB = 0x02; // LED Mode 2
  ae:	85 b9       	out	0x05, r24	; 5
  b0:	ff e9       	ldi	r31, 0x9F	; 159
  b2:	26 e8       	ldi	r18, 0x86	; 134
  b4:	31 e0       	ldi	r19, 0x01	; 1
  b6:	f1 50       	subi	r31, 0x01	; 1
  b8:	20 40       	sbci	r18, 0x00	; 0
  ba:	30 40       	sbci	r19, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x36>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x40>
  c0:	00 00       	nop
			_delay_ms(500);
			PORTB = 0x00;
  c2:	15 b8       	out	0x05, r1	; 5
  c4:	9f e9       	ldi	r25, 0x9F	; 159
  c6:	e6 e8       	ldi	r30, 0x86	; 134
  c8:	f1 e0       	ldi	r31, 0x01	; 1
  ca:	91 50       	subi	r25, 0x01	; 1
  cc:	e0 40       	sbci	r30, 0x00	; 0
  ce:	f0 40       	sbci	r31, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x4a>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x54>
  d4:	00 00       	nop
  d6:	da cf       	rjmp	.-76     	; 0x8c <main+0xc>

000000d8 <_exit>:
  d8:	f8 94       	cli

000000da <__stop_program>:
  da:	ff cf       	rjmp	.-2      	; 0xda <__stop_program>
